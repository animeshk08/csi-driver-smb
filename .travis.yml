language: go
sudo: required
go_import_path: github.com/csi-driver/csi-driver-smb
dist: bionic
services:
  - docker
go:
  - "1.13.9"

jobs:
  include:
    - stage: test
      name: "build test"
      script:
        - make verify
        - make smb-windows
        - make container
    - stage: test
      name: "integration test"
      install:
        - GO111MODULE=off go get github.com/rexray/gocsi/csc
        - sudo apt update && sudo apt install cifs-utils procps -y
      script:
        - make
        - make integration-test
    - stage: test
      name: "sanity test"
      install:
        - sudo apt update && sudo apt install cifs-utils procps -y
      script:
        - make
        - make sanity-test
    - stage: test
      name: "e2e test"
      before_install:
        - sudo apt-get -qq -y install conntrack
      env:
        - CHANGE_MINIKUBE_NONE_USER=true
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.18.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.8.1/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --profile=minikube --vm-driver=none --kubernetes-version=v1.18.1
        - minikube update-context --profile=minikube
        - "sudo chown -R travis: /home/travis/.minikube/"
        - eval "$(minikube docker-env --profile=minikube)" && export DOCKER_CLI='docker'

      script:
        - kubectl cluster-info
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available";  done
        - kubectl create secret generic smbcreds --from-literal username=USERNAME --from-literal password="PASSWORD"
        - kubectl create -f deploy/example/smb-provisioner/smb-server.yaml
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n default get pods -lapp=smb-server -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for smb controller deployment to be available"; done
        - bash deploy/install-driver.sh
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lapp=csi-smb-controller -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for smb controller deployment to be available"; done
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lapp=csi-smb-node -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for smb node deployment to be available"; done
        - make
        - make e2e-test
